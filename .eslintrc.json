{
    "env": {
      "browser": true,
      "es2021": true,
      "node": true
    },
    "extends": ["plugin:react/recommended", "prettier", "plugin:prettier/recommended"],
    "parserOptions": {
      "ecmaFeatures": {
        "jsx": true
      },
      "ecmaVersion": 12,
      "sourceType": "module"
    },
    "plugins": ["react", "prettier"],
    "globals": {
      "test": true,
      "document": true,
      "window": true,
      "jest": true,
      "describe": true,
      "it": true,
      "after": true,
      "afterEach": true,
      "before": true,
      "beforeAll": true,
      "beforeEach": true,
      "afterAll": true,
      "should": true,
      "expect": true,
      "localStorage": true
    },
    "rules": {
      // enforces getter/setter pairs in objects
      "accessor-pairs": "off",
      // enforces return statements in callbacks of array's methods
      "array-callback-return": [
        "error",
        {
          "allowImplicit": true
        }
      ],
      // treat var statements as if they were block scoped
      "block-scoped-var": "error",
      // enforce that class methods use "this"
      "class-methods-use-this": "error",
      // require return statements to either always or never specify values
      "consistent-return": "error",
      // specify curly brace conventions for all control statements
      "curly": ["error", "multi-line"], // multiline
      // require default case in switch statements
      "default-case": [
        "error",
        {
          "commentPattern": "^no default$"
        }
      ],
      // encourages use of dot notation whenever possible
      "dot-notation": [
        "error",
        {
          "allowKeywords": true
        }
      ],
      // enforces consistent newlines before or after dots
      "dot-location": ["error", "property"],
      // require the use of === and !==
      "eqeqeq": [
        "error",
        "always",
        {
          "null": "ignore"
        }
      ],
      // Require grouped accessor pairs in object literals and classes
      "grouped-accessor-pairs": "off",
      // make sure for-in loops have an if statement
      "guard-for-in": "error",
      // enforce a maximum number of classes per file
      "max-classes-per-file": ["error", 1],
      // disallow the use of alert, confirm, and prompt
      "no-alert": "off",
      // disallow use of arguments.caller or arguments.callee
      "no-caller": "error",
      // disallow lexical declarations in case/default clauses
      "no-case-declarations": "error",
      // Disallow returning value in constructor
      "no-constructor-return": "off",
      // disallow else after a return in an if
      "no-else-return": [
        "error",
        {
          "allowElseIf": false
        }
      ],
      // disallow empty destructuring patterns
      "no-empty-pattern": "error",
      // disallow comparisons to null without a type-checking operator
      "no-eq-null": "off",
      // disallow use of eval()
      "no-eval": "error",
      // disallow adding to native types
      "no-extend-native": "error",
      // disallow unnecessary function binding
      "no-extra-bind": "error",
      // disallow fallthrough of case statements
      "no-fallthrough": "error",
      // disallow the use of leading or trailing decimal points in numeric literals
      "no-floating-decimal": "error",
      // disallow reassignments of native objects or read-only globals
      "no-global-assign": "off",
      // deprecated in favor of no-global-assign
      "no-native-reassign": "off",
      // disallow use of eval()-like methods
      "no-implied-eval": "error",
      // disallow this keywords outside of classes or class-like objects
      "no-invalid-this": "off",
      // disallow usage of __iterator__ property
      "no-iterator": "error",
      // disallow use of labels for anything other then loops and switches
      "no-labels": "error",
      // disallow unnecessary nested blocks
      "no-lone-blocks": "error",
      // disallow creation of functions within loops
      "no-loop-func": "error",
      // disallow use of multiline strings
      "no-multi-str": "error",
      // disallow use of new operator when not part of the assignment or comparison
      "no-new": "error",
      // disallow use of new operator for Function object
      "no-new-func": "error",
      //disallow Object constructors
      "no-new-object": "error",
      // disallow use of (old style) octal literals
      "no-octal": "error",
      // disallow use of octal escape sequences in string literals, such as
      // var foo = 'Copyright \251';
      "no-octal-escape": "error",
      // disallow usage of __proto__ property
      "no-proto": "error",
      // disallow declaring the same variable more then once
      "no-redeclare": "error",
      // disallow use of assignment in return statement
      "no-return-assign": ["error", "always"],
      // disallow use of `javascript:` urls.
      "no-script-url": "error",
      // disallow comparisons where both sides are exactly the same
      "no-self-compare": "error",
      // disallow use of comma operator
      "no-sequences": "error",
      // restrict what can be thrown as an exception
      "no-throw-literal": "error",
      // disallow unmodified conditions of loops
      "no-unmodified-loop-condition": "off",
      // disallow usage of expressions in statement position
      "no-unused-expressions": "error",
      // disallow unused labels
      "no-unused-labels": "error",
      // disallow unnecessary .call() and .apply()
      "no-useless-call": "off",
      // Disallow unnecessary catch clauses
      "no-useless-catch": "error",
      // disallow useless string concatenation
      "no-useless-concat": "error",
      // disallow unnecessary string escaping
      "no-useless-escape": "error",
      // disallow redundant return; keywords
      "no-useless-return": "error",
      // disallow use of the with statement
      "no-with": "error",
      // require using Error objects as Promise rejection reasons
      "prefer-promise-reject-errors": [
        "error",
        {
          "allowEmptyReject": true
        }
      ],
      // require use of the second argument for parseInt()
      "radix": "error",
      // disallow use of undeclared variables unless mentioned in a /*global */ block
      "no-undef": "off",
      // disallow use of undefined variable
      "no-undefined": "off",
      // disallow declaration of variables already declared in the outer scope
      "no-shadow": "off",
      // requires to declare all vars on top of their containing scope
      "vars-on-top": "error",
      // disallow mixed spaces and tabs for indentation
      "no-mixed-spaces-and-tabs": "error",
      // require let or const instead of var
      "no-var": "error",
      // suggest using of const declaration for variables that are never modified after declared
      "prefer-const": "error",
      // disallow empty constructors and constructors that only delegate into the parent class.
      "no-useless-constructor": "error",
      // disallow trailing commas in object literals
      "comma-dangle": ["error", "always-multiline"],
      "react/display-name": "off",
      "react/prop-types": "off",
      "react/react-in-jsx-scope": "off",
      "no-console": "off"
    }
  }